(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/platform-browser'), require('ngx-color-picker')) :
    typeof define === 'function' && define.amd ? define('dynaform', ['exports', '@angular/core', '@angular/forms', '@angular/platform-browser', 'ngx-color-picker'], factory) :
    (factory((global.dynaform = {}),global.ng.core,global.ng.forms,global.ng.platformBrowser,null));
}(this, (function (exports,core,forms,platformBrowser,ngxColorPicker) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckboxComponent = /** @class */ (function () {
        function CheckboxComponent() {
        }
        /**
         * @return {?}
         */
        CheckboxComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        CheckboxComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-checkbox',
                        template: "<div class=\"form-check\" [formGroup]=\"group\">\n    <input [formControlName]=\"field.name\" type=\"checkbox\" class=\"form-check-input mr-2\" />\n    <label>{{field.label}}</label>\n</div>",
                        styles: [""]
                    },] },
        ];
        /** @nocollapse */
        CheckboxComponent.ctorParameters = function () { return []; };
        return CheckboxComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var InputComponent = /** @class */ (function () {
        function InputComponent() {
        }
        /**
         * @return {?}
         */
        InputComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                console.log('inputcomponent : ngoninit');
            };
        InputComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-input',
                        template: "<div class=\"form-group\" [formGroup]=\"group\">\n    <label>{{field.label}}</label>\n    <input formControlName=\"{{field.name}}\" [type]=\"field.inputType\" class=\"form-control\">\n    <ng-container *ngFor=\"let validation of field.validations;\">\n        <div class=\"text-danger mt-2\" *ngIf=\"group.get(field.name).invalid && (group.get(field.name).touched || group.get(field.name).dirty)\">{{validation.message}}</div>\n    </ng-container>\n</div>",
                        styles: [""]
                    },] },
        ];
        /** @nocollapse */
        InputComponent.ctorParameters = function () { return []; };
        return InputComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RadiobuttonComponent = /** @class */ (function () {
        function RadiobuttonComponent() {
        }
        /**
         * @return {?}
         */
        RadiobuttonComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        RadiobuttonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-radiobutton',
                        template: "<div class=\"form-group\" [formGroup]=\"group\">\n    <ng-container *ngFor=\"let item of field.options\">\n        <label class=\"radio-inline mr-2\"><input type=\"radio\" [formControlName]=\"field.name\" [value]=\"item\"> {{item}}</label>\n    </ng-container>\n</div>",
                        styles: [""]
                    },] },
        ];
        /** @nocollapse */
        RadiobuttonComponent.ctorParameters = function () { return []; };
        return RadiobuttonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectComponent = /** @class */ (function () {
        function SelectComponent() {
        }
        /**
         * @return {?}
         */
        SelectComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        SelectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-select',
                        template: "<div [formGroup]=\"group\">\n    <label>{{field.label}}</label>\n    <select class=\"form-control\" [formControlName]=\"field.name\">\n        <option [value]=\"item\" *ngFor=\"let item of field.options\"> {{item}}</option>\n    </select>\n</div>",
                        styles: [""]
                    },] },
        ];
        /** @nocollapse */
        SelectComponent.ctorParameters = function () { return []; };
        return SelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ButtonComponent = /** @class */ (function () {
        function ButtonComponent() {
        }
        /**
         * @return {?}
         */
        ButtonComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        ButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "app-button",
                        template: "<div>\n    <button class=\"btn btn-primary\" [formGroup]=\"group\" type=\"submit\">{{field.label}}</button>\n</div>",
                        styles: [""]
                    },] },
        ];
        /** @nocollapse */
        ButtonComponent.ctorParameters = function () { return []; };
        return ButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ColorPickerComponent = /** @class */ (function () {
        function ColorPickerComponent() {
        }
        /**
         * @return {?}
         */
        ColorPickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} colorCode
         * @return {?}
         */
        ColorPickerComponent.prototype.onColorPickerChange = /**
         * @param {?} colorCode
         * @return {?}
         */
            function (colorCode) {
                this.group.get(this.field.name).setValue(colorCode);
            };
        ColorPickerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-color-picker',
                        template: "<div class=\"form-group\" [formGroup]=\"group\">\n    <label>{{field.label}}</label>\n    <input class=\"form-control color-text\" [formControlName]=\"field.name\" [value]=\"field.value\" [(colorPicker)]=\"field.value\" [style.background]=\"field.value\" [cpOKButton]=\"true\" [cpCancelButton]=\"true\" [cpOutputFormat]=\"'hex'\" [cpSaveClickOutside]=\"true\"\n        (colorPickerChange)=\"onColorPickerChange($event)\">\n</div>",
                        styles: [".color-text{font-weight:bolder;color:#fff}"]
                    },] },
        ];
        /** @nocollapse */
        ColorPickerComponent.ctorParameters = function () { return []; };
        return ColorPickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var controlMapper = {
        input: InputComponent,
        select: SelectComponent,
        radiobutton: RadiobuttonComponent,
        checkbox: CheckboxComponent,
        colorpicker: ColorPickerComponent,
        button: ButtonComponent
    };
    var DynamicFieldDirective = /** @class */ (function () {
        function DynamicFieldDirective(resolver, viewContainer) {
            this.resolver = resolver;
            this.viewContainer = viewContainer;
        }
        /**
         * @return {?}
         */
        DynamicFieldDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var factory = this.resolver.resolveComponentFactory(controlMapper[this.field.type]);
                this.componentRef = this.viewContainer.createComponent(factory);
                this.componentRef.instance.field = this.field;
                this.componentRef.instance.group = this.group;
            };
        DynamicFieldDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[dynamic-field]'
                    },] },
        ];
        /** @nocollapse */
        DynamicFieldDirective.ctorParameters = function () {
            return [
                { type: core.ComponentFactoryResolver },
                { type: core.ViewContainerRef }
            ];
        };
        DynamicFieldDirective.propDecorators = {
            field: [{ type: core.Input }],
            group: [{ type: core.Input }]
        };
        return DynamicFieldDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DynamicFormComponent = /** @class */ (function () {
        function DynamicFormComponent(fb) {
            this.fb = fb;
            this.fields = [];
            this.submit = new core.EventEmitter();
        }
        Object.defineProperty(DynamicFormComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this.form.value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DynamicFormComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        DynamicFormComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.form = this.createFormControls();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DynamicFormComponent.prototype.onSubmit = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                event.stopPropagation();
                if (this.form.valid) {
                    this.submit.emit(this.form.value);
                }
                else {
                    this.validateAllFormFields(this.form);
                }
            };
        /**
         * @return {?}
         */
        DynamicFormComponent.prototype.createFormControls = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var group = this.fb.group({});
                this.fields.forEach(function (field) {
                    if (field.type === "button")
                        return;
                    /** @type {?} */
                    var control = _this.fb.control(field.value, _this.bindValidations(field.validations || []));
                    group.addControl(field.name, control);
                });
                return group;
            };
        /**
         * @param {?} validations
         * @return {?}
         */
        DynamicFormComponent.prototype.bindValidations = /**
         * @param {?} validations
         * @return {?}
         */
            function (validations) {
                if (validations.length > 0) {
                    /** @type {?} */
                    var validList_1 = [];
                    validations.forEach(function (valid) {
                        validList_1.push(valid.validator);
                    });
                    return forms.Validators.compose(validList_1);
                }
                return null;
            };
        /**
         * @param {?} formGroup
         * @return {?}
         */
        DynamicFormComponent.prototype.validateAllFormFields = /**
         * @param {?} formGroup
         * @return {?}
         */
            function (formGroup) {
                Object.keys(formGroup.controls).forEach(function (field) {
                    /** @type {?} */
                    var control = formGroup.get(field);
                    control.markAsTouched({ onlySelf: true });
                });
            };
        DynamicFormComponent.decorators = [
            { type: core.Component, args: [{
                        exportAs: "dynamicForm",
                        selector: "dynamic-form",
                        template: "<form class=\"dynamic-form\" [formGroup]=\"form\" (submit)=\"onSubmit($event)\">\n    <ng-container *ngFor=\"let field of fields;\" dynamic-field [field]=\"field\" [group]=\"form\">\n    </ng-container>\n</form>",
                        styles: [""]
                    },] },
        ];
        /** @nocollapse */
        DynamicFormComponent.ctorParameters = function () {
            return [
                { type: forms.FormBuilder }
            ];
        };
        DynamicFormComponent.propDecorators = {
            fields: [{ type: core.Input }],
            submit: [{ type: core.Output }]
        };
        return DynamicFormComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DynaformModule = /** @class */ (function () {
        function DynaformModule() {
        }
        DynaformModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            platformBrowser.BrowserModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            ngxColorPicker.ColorPickerModule
                        ],
                        declarations: [
                            DynamicFieldDirective,
                            CheckboxComponent,
                            InputComponent,
                            RadiobuttonComponent,
                            SelectComponent,
                            ButtonComponent,
                            ColorPickerComponent,
                            DynamicFormComponent
                        ],
                        entryComponents: [
                            InputComponent,
                            SelectComponent,
                            CheckboxComponent,
                            RadiobuttonComponent,
                            ColorPickerComponent,
                            ButtonComponent
                        ],
                        exports: [
                            DynamicFieldDirective,
                            DynamicFormComponent
                        ]
                    },] },
        ];
        return DynaformModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.DynaformModule = DynaformModule;
    exports.CheckboxComponent = CheckboxComponent;
    exports.InputComponent = InputComponent;
    exports.RadiobuttonComponent = RadiobuttonComponent;
    exports.SelectComponent = SelectComponent;
    exports.ColorPickerComponent = ColorPickerComponent;
    exports.DynamicFieldDirective = DynamicFieldDirective;
    exports.DynamicFormComponent = DynamicFormComponent;
    exports.ɵa = ButtonComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYWZvcm0udW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9keW5hZm9ybS9saWIvY29udHJvbHMvY2hlY2tib3gvY2hlY2tib3guY29tcG9uZW50LnRzIiwibmc6Ly9keW5hZm9ybS9saWIvY29udHJvbHMvaW5wdXQvaW5wdXQuY29tcG9uZW50LnRzIiwibmc6Ly9keW5hZm9ybS9saWIvY29udHJvbHMvcmFkaW9idXR0b24vcmFkaW9idXR0b24uY29tcG9uZW50LnRzIiwibmc6Ly9keW5hZm9ybS9saWIvY29udHJvbHMvc2VsZWN0L3NlbGVjdC5jb21wb25lbnQudHMiLCJuZzovL2R5bmFmb3JtL2xpYi9jb250cm9scy9idXR0b24vYnV0dG9uLmNvbXBvbmVudC50cyIsIm5nOi8vZHluYWZvcm0vbGliL2NvbnRyb2xzL2NvbG9yLXBpY2tlci9jb2xvci1waWNrZXIuY29tcG9uZW50LnRzIiwibmc6Ly9keW5hZm9ybS9saWIvZGlyZWN0aXZlcy9keW5hbWljLWZpZWxkLmRpcmVjdGl2ZS50cyIsIm5nOi8vZHluYWZvcm0vbGliL2NvbXBvbmVudC9keW5hbWljLWZvcm0vZHluYW1pYy1mb3JtLmNvbXBvbmVudC50cyIsIm5nOi8vZHluYWZvcm0vbGliL2R5bmFmb3JtLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4uLy4uL21vZGVsL2ZpZWxkLmludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYXBwLWNoZWNrYm94JyxcbiAgICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCIgW2Zvcm1Hcm91cF09XCJncm91cFwiPlxuICAgIDxpbnB1dCBbZm9ybUNvbnRyb2xOYW1lXT1cImZpZWxkLm5hbWVcIiB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImZvcm0tY2hlY2staW5wdXQgbXItMlwiIC8+XG4gICAgPGxhYmVsPnt7ZmllbGQubGFiZWx9fTwvbGFiZWw+XG48L2Rpdj5gLFxuICAgIHN0eWxlczogW2BgXVxufSlcbmV4cG9ydCBjbGFzcyBDaGVja2JveENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgZmllbGQ6IEZpZWxkO1xuICAgIGdyb3VwOiBGb3JtR3JvdXA7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4uLy4uL21vZGVsL2ZpZWxkLmludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYXBwLWlucHV0JyxcbiAgICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCIgW2Zvcm1Hcm91cF09XCJncm91cFwiPlxuICAgIDxsYWJlbD57e2ZpZWxkLmxhYmVsfX08L2xhYmVsPlxuICAgIDxpbnB1dCBmb3JtQ29udHJvbE5hbWU9XCJ7e2ZpZWxkLm5hbWV9fVwiIFt0eXBlXT1cImZpZWxkLmlucHV0VHlwZVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgdmFsaWRhdGlvbiBvZiBmaWVsZC52YWxpZGF0aW9ucztcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtZGFuZ2VyIG10LTJcIiAqbmdJZj1cImdyb3VwLmdldChmaWVsZC5uYW1lKS5pbnZhbGlkICYmIChncm91cC5nZXQoZmllbGQubmFtZSkudG91Y2hlZCB8fCBncm91cC5nZXQoZmllbGQubmFtZSkuZGlydHkpXCI+e3t2YWxpZGF0aW9uLm1lc3NhZ2V9fTwvZGl2PlxuICAgIDwvbmctY29udGFpbmVyPlxuPC9kaXY+YCxcbiAgICBzdHlsZXM6IFtgYF1cbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIGZpZWxkOiBGaWVsZDtcbiAgICBncm91cDogRm9ybUdyb3VwO1xuXG4gICAgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBjb25zb2xlLmxvZygnaW5wdXRjb21wb25lbnQgOiBuZ29uaW5pdCcpO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuLi8uLi9tb2RlbC9maWVsZC5pbnRlcmZhY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FwcC1yYWRpb2J1dHRvbicsXG4gICAgdGVtcGxhdGU6IGA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiIFtmb3JtR3JvdXBdPVwiZ3JvdXBcIj5cbiAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBpdGVtIG9mIGZpZWxkLm9wdGlvbnNcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwicmFkaW8taW5saW5lIG1yLTJcIj48aW5wdXQgdHlwZT1cInJhZGlvXCIgW2Zvcm1Db250cm9sTmFtZV09XCJmaWVsZC5uYW1lXCIgW3ZhbHVlXT1cIml0ZW1cIj4ge3tpdGVtfX08L2xhYmVsPlxuICAgIDwvbmctY29udGFpbmVyPlxuPC9kaXY+YCxcbiAgICBzdHlsZXM6IFtgYF1cbn0pXG5leHBvcnQgY2xhc3MgUmFkaW9idXR0b25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIGZpZWxkOiBGaWVsZDtcbiAgICBncm91cDogRm9ybUdyb3VwO1xuXG4gICAgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuLi8uLi9tb2RlbC9maWVsZC5pbnRlcmZhY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FwcC1zZWxlY3QnLFxuICAgIHRlbXBsYXRlOiBgPGRpdiBbZm9ybUdyb3VwXT1cImdyb3VwXCI+XG4gICAgPGxhYmVsPnt7ZmllbGQubGFiZWx9fTwvbGFiZWw+XG4gICAgPHNlbGVjdCBjbGFzcz1cImZvcm0tY29udHJvbFwiIFtmb3JtQ29udHJvbE5hbWVdPVwiZmllbGQubmFtZVwiPlxuICAgICAgICA8b3B0aW9uIFt2YWx1ZV09XCJpdGVtXCIgKm5nRm9yPVwibGV0IGl0ZW0gb2YgZmllbGQub3B0aW9uc1wiPiB7e2l0ZW19fTwvb3B0aW9uPlxuICAgIDwvc2VsZWN0PlxuPC9kaXY+YCxcbiAgICBzdHlsZXM6IFtgYF1cbn0pXG5leHBvcnQgY2xhc3MgU2VsZWN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBmaWVsZDogRmllbGQ7XG4gICAgZ3JvdXA6IEZvcm1Hcm91cDtcblxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICB9XG5cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuXG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4uLy4uL21vZGVsL2ZpZWxkLmludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcImFwcC1idXR0b25cIixcbiAgICB0ZW1wbGF0ZTogYDxkaXY+XHJcbiAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgW2Zvcm1Hcm91cF09XCJncm91cFwiIHR5cGU9XCJzdWJtaXRcIj57e2ZpZWxkLmxhYmVsfX08L2J1dHRvbj5cclxuPC9kaXY+YCxcbiAgICBzdHlsZXM6IFtgYF1cbn0pXG5leHBvcnQgY2xhc3MgQnV0dG9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBmaWVsZDogRmllbGQ7XG4gICAgZ3JvdXA6IEZvcm1Hcm91cDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi4vLi4vbW9kZWwvZmllbGQuaW50ZXJmYWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhcHAtY29sb3ItcGlja2VyJyxcbiAgICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCIgW2Zvcm1Hcm91cF09XCJncm91cFwiPlxuICAgIDxsYWJlbD57e2ZpZWxkLmxhYmVsfX08L2xhYmVsPlxuICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbCBjb2xvci10ZXh0XCIgW2Zvcm1Db250cm9sTmFtZV09XCJmaWVsZC5uYW1lXCIgW3ZhbHVlXT1cImZpZWxkLnZhbHVlXCIgWyhjb2xvclBpY2tlcildPVwiZmllbGQudmFsdWVcIiBbc3R5bGUuYmFja2dyb3VuZF09XCJmaWVsZC52YWx1ZVwiIFtjcE9LQnV0dG9uXT1cInRydWVcIiBbY3BDYW5jZWxCdXR0b25dPVwidHJ1ZVwiIFtjcE91dHB1dEZvcm1hdF09XCInaGV4J1wiIFtjcFNhdmVDbGlja091dHNpZGVdPVwidHJ1ZVwiXG4gICAgICAgIChjb2xvclBpY2tlckNoYW5nZSk9XCJvbkNvbG9yUGlja2VyQ2hhbmdlKCRldmVudClcIj5cbjwvZGl2PmAsXG4gICAgc3R5bGVzOiBbYC5jb2xvci10ZXh0e2ZvbnQtd2VpZ2h0OmJvbGRlcjtjb2xvcjojZmZmfWBdXG59KVxuZXhwb3J0IGNsYXNzIENvbG9yUGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBmaWVsZDogRmllbGQ7XG4gICAgZ3JvdXA6IEZvcm1Hcm91cDtcblxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICB9XG5cbiAgICBvbkNvbG9yUGlja2VyQ2hhbmdlKGNvbG9yQ29kZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZ3JvdXAuZ2V0KHRoaXMuZmllbGQubmFtZSkuc2V0VmFsdWUoY29sb3JDb2RlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgSW5wdXRDb21wb25lbnQgfSBmcm9tICcuLi9jb250cm9scy9pbnB1dC9pbnB1dC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2VsZWN0Q29tcG9uZW50IH0gZnJvbSAnLi4vY29udHJvbHMvc2VsZWN0L3NlbGVjdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUmFkaW9idXR0b25Db21wb25lbnQgfSBmcm9tICcuLi9jb250cm9scy9yYWRpb2J1dHRvbi9yYWRpb2J1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ2hlY2tib3hDb21wb25lbnQgfSBmcm9tICcuLi9jb250cm9scy9jaGVja2JveC9jaGVja2JveC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29sb3JQaWNrZXJDb21wb25lbnQgfSBmcm9tICcuLi9jb250cm9scy9jb2xvci1waWNrZXIvY29sb3ItcGlja2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCdXR0b25Db21wb25lbnQgfSBmcm9tICcuLi9jb250cm9scy9idXR0b24vYnV0dG9uLmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi4vbW9kZWwvZmllbGQuaW50ZXJmYWNlJztcblxuY29uc3QgY29udHJvbE1hcHBlciA9IHtcbiAgICBpbnB1dDogSW5wdXRDb21wb25lbnQsXG4gICAgc2VsZWN0OiBTZWxlY3RDb21wb25lbnQsXG4gICAgcmFkaW9idXR0b246IFJhZGlvYnV0dG9uQ29tcG9uZW50LFxuICAgIGNoZWNrYm94OiBDaGVja2JveENvbXBvbmVudCxcbiAgICBjb2xvcnBpY2tlcjogQ29sb3JQaWNrZXJDb21wb25lbnQsXG4gICAgYnV0dG9uOiBCdXR0b25Db21wb25lbnRcbn07XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2R5bmFtaWMtZmllbGRdJ1xufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljRmllbGREaXJlY3RpdmUge1xuICAgIEBJbnB1dCgpIGZpZWxkOiBGaWVsZDtcbiAgICBASW5wdXQoKSBncm91cDogRm9ybUdyb3VwO1xuXG4gICAgY29tcG9uZW50UmVmOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZikge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShjb250cm9sTWFwcGVyW3RoaXMuZmllbGQudHlwZV0pO1xuICAgICAgICB0aGlzLmNvbXBvbmVudFJlZiA9IHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVDb21wb25lbnQoZmFjdG9yeSk7XG4gICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmZpZWxkID0gdGhpcy5maWVsZDtcbiAgICAgICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZ3JvdXAgPSB0aGlzLmdyb3VwO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZvcm1Hcm91cCwgRm9ybUJ1aWxkZXIsIFZhbGlkYXRvcnMgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcblxuaW1wb3J0IHsgRmllbGQgfSBmcm9tIFwiLi4vLi4vbW9kZWwvZmllbGQuaW50ZXJmYWNlXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIGV4cG9ydEFzOiBcImR5bmFtaWNGb3JtXCIsXG4gICAgc2VsZWN0b3I6IFwiZHluYW1pYy1mb3JtXCIsXG4gICAgdGVtcGxhdGU6IGA8Zm9ybSBjbGFzcz1cImR5bmFtaWMtZm9ybVwiIFtmb3JtR3JvdXBdPVwiZm9ybVwiIChzdWJtaXQpPVwib25TdWJtaXQoJGV2ZW50KVwiPlxyXG4gICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgZmllbGQgb2YgZmllbGRzO1wiIGR5bmFtaWMtZmllbGQgW2ZpZWxkXT1cImZpZWxkXCIgW2dyb3VwXT1cImZvcm1cIj5cclxuICAgIDwvbmctY29udGFpbmVyPlxyXG48L2Zvcm0+YCxcbiAgICBzdHlsZXM6IFtgYF1cbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0Zvcm1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgQElucHV0KCkgZmllbGRzOiBGaWVsZFtdID0gW107XG5cbiAgICBAT3V0cHV0KCkgc3VibWl0OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgZm9ybTogRm9ybUdyb3VwO1xuXG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtLnZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZmI6IEZvcm1CdWlsZGVyKSB7IH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKCkge1xuICAgICAgICB0aGlzLmZvcm0gPSB0aGlzLmNyZWF0ZUZvcm1Db250cm9scygpO1xuICAgIH1cblxuICAgIG9uU3VibWl0KGV2ZW50OiBFdmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgaWYgKHRoaXMuZm9ybS52YWxpZCkge1xuICAgICAgICAgICAgdGhpcy5zdWJtaXQuZW1pdCh0aGlzLmZvcm0udmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUFsbEZvcm1GaWVsZHModGhpcy5mb3JtKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZUZvcm1Db250cm9scygpIHtcbiAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmZiLmdyb3VwKHt9KTtcbiAgICAgICAgdGhpcy5maWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICAgICAgICBpZiAoZmllbGQudHlwZSA9PT0gXCJidXR0b25cIikgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgY29udHJvbCA9IHRoaXMuZmIuY29udHJvbChcbiAgICAgICAgICAgICAgICBmaWVsZC52YWx1ZSxcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmRWYWxpZGF0aW9ucyhmaWVsZC52YWxpZGF0aW9ucyB8fCBbXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBncm91cC5hZGRDb250cm9sKGZpZWxkLm5hbWUsIGNvbnRyb2wpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH1cblxuICAgIGJpbmRWYWxpZGF0aW9ucyh2YWxpZGF0aW9uczogYW55KSB7XG4gICAgICAgIGlmICh2YWxpZGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCB2YWxpZExpc3QgPSBbXTtcbiAgICAgICAgICAgIHZhbGlkYXRpb25zLmZvckVhY2godmFsaWQgPT4ge1xuICAgICAgICAgICAgICAgIHZhbGlkTGlzdC5wdXNoKHZhbGlkLnZhbGlkYXRvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBWYWxpZGF0b3JzLmNvbXBvc2UodmFsaWRMaXN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZUFsbEZvcm1GaWVsZHMoZm9ybUdyb3VwOiBGb3JtR3JvdXApIHtcbiAgICAgICAgT2JqZWN0LmtleXMoZm9ybUdyb3VwLmNvbnRyb2xzKS5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRyb2wgPSBmb3JtR3JvdXAuZ2V0KGZpZWxkKTtcbiAgICAgICAgICAgIGNvbnRyb2wubWFya0FzVG91Y2hlZCh7IG9ubHlTZWxmOiB0cnVlIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCcm93c2VyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbG9yUGlja2VyTW9kdWxlIH0gZnJvbSAnbmd4LWNvbG9yLXBpY2tlcic7XG5cbmltcG9ydCB7IENoZWNrYm94Q29tcG9uZW50IH0gZnJvbSAnLi9jb250cm9scy9jaGVja2JveC9jaGVja2JveC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSW5wdXRDb21wb25lbnQgfSBmcm9tICcuL2NvbnRyb2xzL2lucHV0L2lucHV0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBSYWRpb2J1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vY29udHJvbHMvcmFkaW9idXR0b24vcmFkaW9idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7IFNlbGVjdENvbXBvbmVudCB9IGZyb20gJy4vY29udHJvbHMvc2VsZWN0L3NlbGVjdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi9jb250cm9scy9idXR0b24vYnV0dG9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2xvclBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vY29udHJvbHMvY29sb3ItcGlja2VyL2NvbG9yLXBpY2tlci5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBEeW5hbWljRmllbGREaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvZHluYW1pYy1maWVsZC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC9keW5hbWljLWZvcm0vZHluYW1pYy1mb3JtLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1xuICAgICAgICBCcm93c2VyTW9kdWxlLFxuICAgICAgICBGb3Jtc01vZHVsZSxcbiAgICAgICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICAgICAgQ29sb3JQaWNrZXJNb2R1bGVcbiAgICBdLFxuICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICBEeW5hbWljRmllbGREaXJlY3RpdmUsXG4gICAgICAgIENoZWNrYm94Q29tcG9uZW50LFxuICAgICAgICBJbnB1dENvbXBvbmVudCxcbiAgICAgICAgUmFkaW9idXR0b25Db21wb25lbnQsXG4gICAgICAgIFNlbGVjdENvbXBvbmVudCxcbiAgICAgICAgQnV0dG9uQ29tcG9uZW50LFxuICAgICAgICBDb2xvclBpY2tlckNvbXBvbmVudCxcbiAgICAgICAgRHluYW1pY0Zvcm1Db21wb25lbnRcbiAgICBdLFxuICAgIGVudHJ5Q29tcG9uZW50czogW1xuICAgICAgICBJbnB1dENvbXBvbmVudCxcbiAgICAgICAgU2VsZWN0Q29tcG9uZW50LFxuICAgICAgICBDaGVja2JveENvbXBvbmVudCxcbiAgICAgICAgUmFkaW9idXR0b25Db21wb25lbnQsXG4gICAgICAgIENvbG9yUGlja2VyQ29tcG9uZW50LFxuICAgICAgICBCdXR0b25Db21wb25lbnRcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgRHluYW1pY0ZpZWxkRGlyZWN0aXZlLFxuICAgICAgICBEeW5hbWljRm9ybUNvbXBvbmVudFxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgRHluYWZvcm1Nb2R1bGUgeyB9XG4iXSwibmFtZXMiOlsiQ29tcG9uZW50IiwiRGlyZWN0aXZlIiwiQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIiwiVmlld0NvbnRhaW5lclJlZiIsIklucHV0IiwiRXZlbnRFbWl0dGVyIiwiVmFsaWRhdG9ycyIsIkZvcm1CdWlsZGVyIiwiT3V0cHV0IiwiTmdNb2R1bGUiLCJCcm93c2VyTW9kdWxlIiwiRm9ybXNNb2R1bGUiLCJSZWFjdGl2ZUZvcm1zTW9kdWxlIiwiQ29sb3JQaWNrZXJNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtRQWlCSTtTQUFpQjs7OztRQUVqQixvQ0FBUTs7O1lBQVI7YUFDQzs7b0JBZkpBLGNBQVMsU0FBQzt3QkFDUCxRQUFRLEVBQUUsY0FBYzt3QkFDeEIsUUFBUSxFQUFFLGdNQUdQO3dCQUNILE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztxQkFDZjs7OztRQVVELHdCQUFDO0tBQUE7Ozs7OztBQ3RCRDtRQW9CSTtTQUFpQjs7OztRQUVqQixpQ0FBUTs7O1lBQVI7Z0JBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO2FBQzVDOztvQkFuQkpBLGNBQVMsU0FBQzt3QkFDUCxRQUFRLEVBQUUsV0FBVzt3QkFDckIsUUFBUSxFQUFFLHljQU1QO3dCQUNILE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztxQkFDZjs7OztRQVdELHFCQUFDO0tBQUE7Ozs7OztBQzFCRDtRQWtCSTtTQUFpQjs7OztRQUVqQix1Q0FBUTs7O1lBQVI7YUFDQzs7b0JBaEJKQSxjQUFTLFNBQUM7d0JBQ1AsUUFBUSxFQUFFLGlCQUFpQjt3QkFDM0IsUUFBUSxFQUFFLDhRQUlQO3dCQUNILE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztxQkFDZjs7OztRQVVELDJCQUFDO0tBQUE7Ozs7OztBQ3ZCRDtRQW1CSTtTQUFpQjs7OztRQUVqQixrQ0FBUTs7O1lBQVI7YUFDQzs7b0JBakJKQSxjQUFTLFNBQUM7d0JBQ1AsUUFBUSxFQUFFLFlBQVk7d0JBQ3RCLFFBQVEsRUFBRSx3UEFLUDt3QkFDSCxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7cUJBQ2Y7Ozs7UUFVRCxzQkFBQztLQUFBOzs7Ozs7QUN4QkQ7UUFnQkk7U0FDQzs7OztRQUVELGtDQUFROzs7WUFBUjthQUNDOztvQkFmSkEsY0FBUyxTQUFDO3dCQUNQLFFBQVEsRUFBRSxZQUFZO3dCQUN0QixRQUFRLEVBQUUscUhBRVA7d0JBQ0gsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO3FCQUNmOzs7O1FBVUQsc0JBQUM7S0FBQTs7Ozs7O0FDckJEO1FBa0JJO1NBQWlCOzs7O1FBRWpCLHVDQUFROzs7WUFBUjthQUNDOzs7OztRQUVELGtEQUFtQjs7OztZQUFuQixVQUFvQixTQUFpQjtnQkFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDdkQ7O29CQXBCSkEsY0FBUyxTQUFDO3dCQUNQLFFBQVEsRUFBRSxrQkFBa0I7d0JBQzVCLFFBQVEsRUFBRSwrYUFJUDt3QkFDSCxNQUFNLEVBQUUsQ0FBQyw0Q0FBNEMsQ0FBQztxQkFDekQ7Ozs7UUFhRCwyQkFBQztLQUFBOzs7Ozs7QUMxQkQ7UUFZTSxhQUFhLEdBQUc7UUFDbEIsS0FBSyxFQUFFLGNBQWM7UUFDckIsTUFBTSxFQUFFLGVBQWU7UUFDdkIsV0FBVyxFQUFFLG9CQUFvQjtRQUNqQyxRQUFRLEVBQUUsaUJBQWlCO1FBQzNCLFdBQVcsRUFBRSxvQkFBb0I7UUFDakMsTUFBTSxFQUFFLGVBQWU7S0FDMUI7QUFFRDtRQVNJLCtCQUFvQixRQUFrQyxFQUFVLGFBQStCO1lBQTNFLGFBQVEsR0FBUixRQUFRLENBQTBCO1lBQVUsa0JBQWEsR0FBYixhQUFhLENBQWtCO1NBQzlGOzs7O1FBRUQsd0NBQVE7OztZQUFSOztvQkFDVSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDckYsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDaEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQzlDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQ2pEOztvQkFqQkpDLGNBQVMsU0FBQzt3QkFDUCxRQUFRLEVBQUUsaUJBQWlCO3FCQUM5Qjs7Ozs7d0JBdkIwQkMsNkJBQXdCO3dCQUFFQyxxQkFBZ0I7Ozs7NEJBeUJoRUMsVUFBSzs0QkFDTEEsVUFBSzs7UUFjViw0QkFBQztLQUFBOzs7Ozs7QUN4Q0Q7UUF5QkksOEJBQW9CLEVBQWU7WUFBZixPQUFFLEdBQUYsRUFBRSxDQUFhO1lBVjFCLFdBQU0sR0FBWSxFQUFFLENBQUM7WUFFcEIsV0FBTSxHQUFzQixJQUFJQyxpQkFBWSxFQUFPLENBQUM7U0FRdEI7UUFKeEMsc0JBQUksdUNBQUs7OztnQkFBVDtnQkFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQzFCOzs7V0FBQTs7OztRQUlELHVDQUFROzs7WUFBUjthQUNDOzs7O1FBRUQsMENBQVc7OztZQUFYO2dCQUNJLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7YUFDekM7Ozs7O1FBRUQsdUNBQVE7Ozs7WUFBUixVQUFTLEtBQVk7Z0JBQ2pCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDdkIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO2dCQUN4QixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO29CQUNqQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNyQztxQkFBTTtvQkFDSCxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUN6QzthQUNKOzs7O1FBRUQsaURBQWtCOzs7WUFBbEI7Z0JBQUEsaUJBV0M7O29CQVZTLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztvQkFDckIsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFFBQVE7d0JBQUUsT0FBTzs7d0JBQzlCLE9BQU8sR0FBRyxLQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FDM0IsS0FBSyxDQUFDLEtBQUssRUFDWCxLQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLENBQ2hEO29CQUNELEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztpQkFDekMsQ0FBQyxDQUFDO2dCQUNILE9BQU8sS0FBSyxDQUFDO2FBQ2hCOzs7OztRQUVELDhDQUFlOzs7O1lBQWYsVUFBZ0IsV0FBZ0I7Z0JBQzVCLElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7O3dCQUNsQixXQUFTLEdBQUcsRUFBRTtvQkFDcEIsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7d0JBQ3JCLFdBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO3FCQUNuQyxDQUFDLENBQUM7b0JBQ0gsT0FBT0MsZ0JBQVUsQ0FBQyxPQUFPLENBQUMsV0FBUyxDQUFDLENBQUM7aUJBQ3hDO2dCQUNELE9BQU8sSUFBSSxDQUFDO2FBQ2Y7Ozs7O1FBRUQsb0RBQXFCOzs7O1lBQXJCLFVBQXNCLFNBQW9CO2dCQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxLQUFLOzt3QkFDbkMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO29CQUNwQyxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7aUJBQzdDLENBQUMsQ0FBQzthQUNOOztvQkFwRUpOLGNBQVMsU0FBQzt3QkFDUCxRQUFRLEVBQUUsYUFBYTt3QkFDdkIsUUFBUSxFQUFFLGNBQWM7d0JBQ3hCLFFBQVEsRUFBRSxxTkFHTjt3QkFDSixNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7cUJBQ2Y7Ozs7O3dCQVptQk8saUJBQVc7Ozs7NkJBYzFCSCxVQUFLOzZCQUVMSSxXQUFNOztRQXlEWCwyQkFBQztLQUFBOzs7Ozs7QUMxRUQ7UUFrQkE7U0E4QitCOztvQkE5QjlCQyxhQUFRLFNBQUM7d0JBQ04sT0FBTyxFQUFFOzRCQUNMQyw2QkFBYTs0QkFDYkMsaUJBQVc7NEJBQ1hDLHlCQUFtQjs0QkFDbkJDLGdDQUFpQjt5QkFDcEI7d0JBQ0QsWUFBWSxFQUFFOzRCQUNWLHFCQUFxQjs0QkFDckIsaUJBQWlCOzRCQUNqQixjQUFjOzRCQUNkLG9CQUFvQjs0QkFDcEIsZUFBZTs0QkFDZixlQUFlOzRCQUNmLG9CQUFvQjs0QkFDcEIsb0JBQW9CO3lCQUN2Qjt3QkFDRCxlQUFlLEVBQUU7NEJBQ2IsY0FBYzs0QkFDZCxlQUFlOzRCQUNmLGlCQUFpQjs0QkFDakIsb0JBQW9COzRCQUNwQixvQkFBb0I7NEJBQ3BCLGVBQWU7eUJBQ2xCO3dCQUNELE9BQU8sRUFBRTs0QkFDTCxxQkFBcUI7NEJBQ3JCLG9CQUFvQjt5QkFDdkI7cUJBQ0o7O1FBQzZCLHFCQUFDO0tBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==