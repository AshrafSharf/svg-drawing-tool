{"version":3,"sources":["ng://dynaform/lib/controls/checkbox/checkbox.component.ts","ng://dynaform/lib/controls/input/input.component.ts","ng://dynaform/lib/controls/radiobutton/radiobutton.component.ts","ng://dynaform/lib/controls/select/select.component.ts","ng://dynaform/lib/controls/button/button.component.ts","ng://dynaform/lib/controls/color-picker/color-picker.component.ts","ng://dynaform/lib/directives/dynamic-field.directive.ts","ng://dynaform/lib/component/dynamic-form/dynamic-form.component.ts","ng://dynaform/lib/dynaform.module.ts"],"names":["CheckboxComponent","prototype","ngOnInit","Component","args","selector","template","styles","InputComponent","console","log","RadiobuttonComponent","SelectComponent","ButtonComponent","ColorPickerComponent","onColorPickerChange","colorCode","this","group","get","field","name","setValue","controlMapper","input","select","radiobutton","checkbox","colorpicker","button","DynamicFieldDirective","resolver","viewContainer","factory","resolveComponentFactory","type","componentRef","createComponent","instance","Directive","ComponentFactoryResolver","ViewContainerRef","Input","DynamicFormComponent","fb","fields","submit","EventEmitter","Object","defineProperty","form","value","ngOnChanges","createFormControls","onSubmit","event","preventDefault","stopPropagation","valid","emit","validateAllFormFields","_this","forEach","control","bindValidations","validations","addControl","length","validList_1","push","validator","Validators","compose","formGroup","keys","controls","markAsTouched","onlySelf","exportAs","FormBuilder","Output","DynaformModule","NgModule","imports","BrowserModule","FormsModule","ReactiveFormsModule","ColorPickerModule","declarations","entryComponents","exports"],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Field } from '../../model/field.interface';\n\n@Component({\n    selector: 'app-checkbox',\n    template: `<div class=\"form-check\" [formGroup]=\"group\">\n    <input [formControlName]=\"field.name\" type=\"checkbox\" class=\"form-check-input mr-2\" />\n    <label>{{field.label}}</label>\n</div>`,\n    styles: [``]\n})\nexport class CheckboxComponent implements OnInit {\n    field: Field;\n    group: FormGroup;\n\n    constructor() { }\n\n    ngOnInit() {\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Field } from '../../model/field.interface';\n\n@Component({\n    selector: 'app-input',\n    template: `<div class=\"form-group\" [formGroup]=\"group\">\n    <label>{{field.label}}</label>\n    <input formControlName=\"{{field.name}}\" [type]=\"field.inputType\" class=\"form-control\">\n    <ng-container *ngFor=\"let validation of field.validations;\">\n        <div class=\"text-danger mt-2\" *ngIf=\"group.get(field.name).invalid && (group.get(field.name).touched || group.get(field.name).dirty)\">{{validation.message}}</div>\n    </ng-container>\n</div>`,\n    styles: [``]\n})\nexport class InputComponent implements OnInit {\n    field: Field;\n    group: FormGroup;\n\n    constructor() { }\n\n    ngOnInit() {\n        console.log('inputcomponent : ngoninit');\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Field } from '../../model/field.interface';\n\n@Component({\n    selector: 'app-radiobutton',\n    template: `<div class=\"form-group\" [formGroup]=\"group\">\n    <ng-container *ngFor=\"let item of field.options\">\n        <label class=\"radio-inline mr-2\"><input type=\"radio\" [formControlName]=\"field.name\" [value]=\"item\"> {{item}}</label>\n    </ng-container>\n</div>`,\n    styles: [``]\n})\nexport class RadiobuttonComponent implements OnInit {\n    field: Field;\n    group: FormGroup;\n\n    constructor() { }\n\n    ngOnInit() {\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Field } from '../../model/field.interface';\n\n@Component({\n    selector: 'app-select',\n    template: `<div [formGroup]=\"group\">\n    <label>{{field.label}}</label>\n    <select class=\"form-control\" [formControlName]=\"field.name\">\n        <option [value]=\"item\" *ngFor=\"let item of field.options\"> {{item}}</option>\n    </select>\n</div>`,\n    styles: [``]\n})\nexport class SelectComponent implements OnInit {\n    field: Field;\n    group: FormGroup;\n\n    constructor() { }\n\n    ngOnInit() {\n    }\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\n\nimport { Field } from '../../model/field.interface';\n\n@Component({\n    selector: \"app-button\",\n    template: `<div>\r\n    <button class=\"btn btn-primary\" [formGroup]=\"group\" type=\"submit\">{{field.label}}</button>\r\n</div>`,\n    styles: [``]\n})\nexport class ButtonComponent implements OnInit {\n    field: Field;\n    group: FormGroup;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Field } from '../../model/field.interface';\n\n@Component({\n    selector: 'app-color-picker',\n    template: `<div class=\"form-group\" [formGroup]=\"group\">\n    <label>{{field.label}}</label>\n    <input class=\"form-control color-text\" [formControlName]=\"field.name\" [value]=\"field.value\" [(colorPicker)]=\"field.value\" [style.background]=\"field.value\" [cpOKButton]=\"true\" [cpCancelButton]=\"true\" [cpOutputFormat]=\"'hex'\" [cpSaveClickOutside]=\"true\"\n        (colorPickerChange)=\"onColorPickerChange($event)\">\n</div>`,\n    styles: [`.color-text{font-weight:bolder;color:#fff}`]\n})\nexport class ColorPickerComponent implements OnInit {\n    field: Field;\n    group: FormGroup;\n\n    constructor() { }\n\n    ngOnInit() {\n    }\n\n    onColorPickerChange(colorCode: string): void {\n        this.group.get(this.field.name).setValue(colorCode);\n    }\n}\n","import { Directive, Input, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { InputComponent } from '../controls/input/input.component';\nimport { SelectComponent } from '../controls/select/select.component';\nimport { RadiobuttonComponent } from '../controls/radiobutton/radiobutton.component';\nimport { CheckboxComponent } from '../controls/checkbox/checkbox.component';\nimport { ColorPickerComponent } from '../controls/color-picker/color-picker.component';\nimport { ButtonComponent } from '../controls/button/button.component';\n\nimport { Field } from '../model/field.interface';\n\nconst controlMapper = {\n    input: InputComponent,\n    select: SelectComponent,\n    radiobutton: RadiobuttonComponent,\n    checkbox: CheckboxComponent,\n    colorpicker: ColorPickerComponent,\n    button: ButtonComponent\n};\n\n@Directive({\n    selector: '[dynamic-field]'\n})\nexport class DynamicFieldDirective {\n    @Input() field: Field;\n    @Input() group: FormGroup;\n\n    componentRef: any;\n\n    constructor(private resolver: ComponentFactoryResolver, private viewContainer: ViewContainerRef) {\n    }\n\n    ngOnInit() {\n        const factory = this.resolver.resolveComponentFactory(controlMapper[this.field.type]);\n        this.componentRef = this.viewContainer.createComponent(factory);\n        this.componentRef.instance.field = this.field;\n        this.componentRef.instance.group = this.group;\n    }\n\n}\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\n\nimport { Field } from \"../../model/field.interface\";\n\n@Component({\n    exportAs: \"dynamicForm\",\n    selector: \"dynamic-form\",\n    template: `<form class=\"dynamic-form\" [formGroup]=\"form\" (submit)=\"onSubmit($event)\">\r\n    <ng-container *ngFor=\"let field of fields;\" dynamic-field [field]=\"field\" [group]=\"form\">\r\n    </ng-container>\r\n</form>`,\n    styles: [``]\n})\nexport class DynamicFormComponent implements OnInit, OnChanges {\n    @Input() fields: Field[] = [];\n\n    @Output() submit: EventEmitter<any> = new EventEmitter<any>();\n\n    form: FormGroup;\n\n    get value() {\n        return this.form.value;\n    }\n\n    constructor(private fb: FormBuilder) { }\n\n    ngOnInit() {\n    }\n\n    ngOnChanges() {\n        this.form = this.createFormControls();\n    }\n\n    onSubmit(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.form.valid) {\n            this.submit.emit(this.form.value);\n        } else {\n            this.validateAllFormFields(this.form);\n        }\n    }\n\n    createFormControls() {\n        const group = this.fb.group({});\n        this.fields.forEach(field => {\n            if (field.type === \"button\") return;\n            const control = this.fb.control(\n                field.value,\n                this.bindValidations(field.validations || [])\n            );\n            group.addControl(field.name, control);\n        });\n        return group;\n    }\n\n    bindValidations(validations: any) {\n        if (validations.length > 0) {\n            const validList = [];\n            validations.forEach(valid => {\n                validList.push(valid.validator);\n            });\n            return Validators.compose(validList);\n        }\n        return null;\n    }\n\n    validateAllFormFields(formGroup: FormGroup) {\n        Object.keys(formGroup.controls).forEach(field => {\n            const control = formGroup.get(field);\n            control.markAsTouched({ onlySelf: true });\n        });\n    }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { NgModule } from '@angular/core';\n\nimport { ColorPickerModule } from 'ngx-color-picker';\n\nimport { CheckboxComponent } from './controls/checkbox/checkbox.component';\nimport { InputComponent } from './controls/input/input.component';\nimport { RadiobuttonComponent } from './controls/radiobutton/radiobutton.component';\nimport { SelectComponent } from './controls/select/select.component';\nimport { ButtonComponent } from './controls/button/button.component';\nimport { ColorPickerComponent } from './controls/color-picker/color-picker.component';\n\nimport { DynamicFieldDirective } from './directives/dynamic-field.directive';\nimport { DynamicFormComponent } from './component/dynamic-form/dynamic-form.component';\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ColorPickerModule\n    ],\n    declarations: [\n        DynamicFieldDirective,\n        CheckboxComponent,\n        InputComponent,\n        RadiobuttonComponent,\n        SelectComponent,\n        ButtonComponent,\n        ColorPickerComponent,\n        DynamicFormComponent\n    ],\n    entryComponents: [\n        InputComponent,\n        SelectComponent,\n        CheckboxComponent,\n        RadiobuttonComponent,\n        ColorPickerComponent,\n        ButtonComponent\n    ],\n    exports: [\n        DynamicFieldDirective,\n        DynamicFormComponent\n    ]\n})\nexport class DynaformModule { }\n"]}