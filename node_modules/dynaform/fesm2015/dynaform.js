import { Component, Directive, Input, ComponentFactoryResolver, ViewContainerRef, EventEmitter, Output, NgModule } from '@angular/core';
import { FormBuilder, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { ColorPickerModule } from 'ngx-color-picker';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CheckboxComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
CheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-checkbox',
                template: `<div class="form-check" [formGroup]="group">
    <input [formControlName]="field.name" type="checkbox" class="form-check-input mr-2" />
    <label>{{field.label}}</label>
</div>`,
                styles: [``]
            },] },
];
/** @nocollapse */
CheckboxComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        console.log('inputcomponent : ngoninit');
    }
}
InputComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-input',
                template: `<div class="form-group" [formGroup]="group">
    <label>{{field.label}}</label>
    <input formControlName="{{field.name}}" [type]="field.inputType" class="form-control">
    <ng-container *ngFor="let validation of field.validations;">
        <div class="text-danger mt-2" *ngIf="group.get(field.name).invalid && (group.get(field.name).touched || group.get(field.name).dirty)">{{validation.message}}</div>
    </ng-container>
</div>`,
                styles: [``]
            },] },
];
/** @nocollapse */
InputComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RadiobuttonComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
RadiobuttonComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-radiobutton',
                template: `<div class="form-group" [formGroup]="group">
    <ng-container *ngFor="let item of field.options">
        <label class="radio-inline mr-2"><input type="radio" [formControlName]="field.name" [value]="item"> {{item}}</label>
    </ng-container>
</div>`,
                styles: [``]
            },] },
];
/** @nocollapse */
RadiobuttonComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
SelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-select',
                template: `<div [formGroup]="group">
    <label>{{field.label}}</label>
    <select class="form-control" [formControlName]="field.name">
        <option [value]="item" *ngFor="let item of field.options"> {{item}}</option>
    </select>
</div>`,
                styles: [``]
            },] },
];
/** @nocollapse */
SelectComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ButtonComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ButtonComponent.decorators = [
    { type: Component, args: [{
                selector: "app-button",
                template: `<div>
    <button class="btn btn-primary" [formGroup]="group" type="submit">{{field.label}}</button>
</div>`,
                styles: [``]
            },] },
];
/** @nocollapse */
ButtonComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ColorPickerComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} colorCode
     * @return {?}
     */
    onColorPickerChange(colorCode) {
        this.group.get(this.field.name).setValue(colorCode);
    }
}
ColorPickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-color-picker',
                template: `<div class="form-group" [formGroup]="group">
    <label>{{field.label}}</label>
    <input class="form-control color-text" [formControlName]="field.name" [value]="field.value" [(colorPicker)]="field.value" [style.background]="field.value" [cpOKButton]="true" [cpCancelButton]="true" [cpOutputFormat]="'hex'" [cpSaveClickOutside]="true"
        (colorPickerChange)="onColorPickerChange($event)">
</div>`,
                styles: [`.color-text{font-weight:bolder;color:#fff}`]
            },] },
];
/** @nocollapse */
ColorPickerComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const controlMapper = {
    input: InputComponent,
    select: SelectComponent,
    radiobutton: RadiobuttonComponent,
    checkbox: CheckboxComponent,
    colorpicker: ColorPickerComponent,
    button: ButtonComponent
};
class DynamicFieldDirective {
    /**
     * @param {?} resolver
     * @param {?} viewContainer
     */
    constructor(resolver, viewContainer) {
        this.resolver = resolver;
        this.viewContainer = viewContainer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(controlMapper[this.field.type]);
        this.componentRef = this.viewContainer.createComponent(factory);
        this.componentRef.instance.field = this.field;
        this.componentRef.instance.group = this.group;
    }
}
DynamicFieldDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dynamic-field]'
            },] },
];
/** @nocollapse */
DynamicFieldDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef }
];
DynamicFieldDirective.propDecorators = {
    field: [{ type: Input }],
    group: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DynamicFormComponent {
    /**
     * @param {?} fb
     */
    constructor(fb) {
        this.fb = fb;
        this.fields = [];
        this.submit = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get value() {
        return this.form.value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.form = this.createFormControls();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSubmit(event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.form.valid) {
            this.submit.emit(this.form.value);
        }
        else {
            this.validateAllFormFields(this.form);
        }
    }
    /**
     * @return {?}
     */
    createFormControls() {
        /** @type {?} */
        const group = this.fb.group({});
        this.fields.forEach(field => {
            if (field.type === "button")
                return;
            /** @type {?} */
            const control = this.fb.control(field.value, this.bindValidations(field.validations || []));
            group.addControl(field.name, control);
        });
        return group;
    }
    /**
     * @param {?} validations
     * @return {?}
     */
    bindValidations(validations) {
        if (validations.length > 0) {
            /** @type {?} */
            const validList = [];
            validations.forEach(valid => {
                validList.push(valid.validator);
            });
            return Validators.compose(validList);
        }
        return null;
    }
    /**
     * @param {?} formGroup
     * @return {?}
     */
    validateAllFormFields(formGroup) {
        Object.keys(formGroup.controls).forEach(field => {
            /** @type {?} */
            const control = formGroup.get(field);
            control.markAsTouched({ onlySelf: true });
        });
    }
}
DynamicFormComponent.decorators = [
    { type: Component, args: [{
                exportAs: "dynamicForm",
                selector: "dynamic-form",
                template: `<form class="dynamic-form" [formGroup]="form" (submit)="onSubmit($event)">
    <ng-container *ngFor="let field of fields;" dynamic-field [field]="field" [group]="form">
    </ng-container>
</form>`,
                styles: [``]
            },] },
];
/** @nocollapse */
DynamicFormComponent.ctorParameters = () => [
    { type: FormBuilder }
];
DynamicFormComponent.propDecorators = {
    fields: [{ type: Input }],
    submit: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DynaformModule {
}
DynaformModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    BrowserModule,
                    FormsModule,
                    ReactiveFormsModule,
                    ColorPickerModule
                ],
                declarations: [
                    DynamicFieldDirective,
                    CheckboxComponent,
                    InputComponent,
                    RadiobuttonComponent,
                    SelectComponent,
                    ButtonComponent,
                    ColorPickerComponent,
                    DynamicFormComponent
                ],
                entryComponents: [
                    InputComponent,
                    SelectComponent,
                    CheckboxComponent,
                    RadiobuttonComponent,
                    ColorPickerComponent,
                    ButtonComponent
                ],
                exports: [
                    DynamicFieldDirective,
                    DynamicFormComponent
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DynaformModule, CheckboxComponent, InputComponent, RadiobuttonComponent, SelectComponent, ColorPickerComponent, DynamicFieldDirective, DynamicFormComponent, ButtonComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,