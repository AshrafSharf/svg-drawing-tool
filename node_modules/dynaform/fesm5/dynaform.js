import { Component, Directive, Input, ComponentFactoryResolver, ViewContainerRef, EventEmitter, Output, NgModule } from '@angular/core';
import { FormBuilder, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { ColorPickerModule } from 'ngx-color-picker';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CheckboxComponent = /** @class */ (function () {
    function CheckboxComponent() {
    }
    /**
     * @return {?}
     */
    CheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    CheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-checkbox',
                    template: "<div class=\"form-check\" [formGroup]=\"group\">\n    <input [formControlName]=\"field.name\" type=\"checkbox\" class=\"form-check-input mr-2\" />\n    <label>{{field.label}}</label>\n</div>",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    CheckboxComponent.ctorParameters = function () { return []; };
    return CheckboxComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputComponent = /** @class */ (function () {
    function InputComponent() {
    }
    /**
     * @return {?}
     */
    InputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        console.log('inputcomponent : ngoninit');
    };
    InputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-input',
                    template: "<div class=\"form-group\" [formGroup]=\"group\">\n    <label>{{field.label}}</label>\n    <input formControlName=\"{{field.name}}\" [type]=\"field.inputType\" class=\"form-control\">\n    <ng-container *ngFor=\"let validation of field.validations;\">\n        <div class=\"text-danger mt-2\" *ngIf=\"group.get(field.name).invalid && (group.get(field.name).touched || group.get(field.name).dirty)\">{{validation.message}}</div>\n    </ng-container>\n</div>",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    InputComponent.ctorParameters = function () { return []; };
    return InputComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RadiobuttonComponent = /** @class */ (function () {
    function RadiobuttonComponent() {
    }
    /**
     * @return {?}
     */
    RadiobuttonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    RadiobuttonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-radiobutton',
                    template: "<div class=\"form-group\" [formGroup]=\"group\">\n    <ng-container *ngFor=\"let item of field.options\">\n        <label class=\"radio-inline mr-2\"><input type=\"radio\" [formControlName]=\"field.name\" [value]=\"item\"> {{item}}</label>\n    </ng-container>\n</div>",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    RadiobuttonComponent.ctorParameters = function () { return []; };
    return RadiobuttonComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SelectComponent = /** @class */ (function () {
    function SelectComponent() {
    }
    /**
     * @return {?}
     */
    SelectComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    SelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-select',
                    template: "<div [formGroup]=\"group\">\n    <label>{{field.label}}</label>\n    <select class=\"form-control\" [formControlName]=\"field.name\">\n        <option [value]=\"item\" *ngFor=\"let item of field.options\"> {{item}}</option>\n    </select>\n</div>",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    SelectComponent.ctorParameters = function () { return []; };
    return SelectComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ButtonComponent = /** @class */ (function () {
    function ButtonComponent() {
    }
    /**
     * @return {?}
     */
    ButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    ButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: "app-button",
                    template: "<div>\n    <button class=\"btn btn-primary\" [formGroup]=\"group\" type=\"submit\">{{field.label}}</button>\n</div>",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    ButtonComponent.ctorParameters = function () { return []; };
    return ButtonComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ColorPickerComponent = /** @class */ (function () {
    function ColorPickerComponent() {
    }
    /**
     * @return {?}
     */
    ColorPickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} colorCode
     * @return {?}
     */
    ColorPickerComponent.prototype.onColorPickerChange = /**
     * @param {?} colorCode
     * @return {?}
     */
    function (colorCode) {
        this.group.get(this.field.name).setValue(colorCode);
    };
    ColorPickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-color-picker',
                    template: "<div class=\"form-group\" [formGroup]=\"group\">\n    <label>{{field.label}}</label>\n    <input class=\"form-control color-text\" [formControlName]=\"field.name\" [value]=\"field.value\" [(colorPicker)]=\"field.value\" [style.background]=\"field.value\" [cpOKButton]=\"true\" [cpCancelButton]=\"true\" [cpOutputFormat]=\"'hex'\" [cpSaveClickOutside]=\"true\"\n        (colorPickerChange)=\"onColorPickerChange($event)\">\n</div>",
                    styles: [".color-text{font-weight:bolder;color:#fff}"]
                },] },
    ];
    /** @nocollapse */
    ColorPickerComponent.ctorParameters = function () { return []; };
    return ColorPickerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var controlMapper = {
    input: InputComponent,
    select: SelectComponent,
    radiobutton: RadiobuttonComponent,
    checkbox: CheckboxComponent,
    colorpicker: ColorPickerComponent,
    button: ButtonComponent
};
var DynamicFieldDirective = /** @class */ (function () {
    function DynamicFieldDirective(resolver, viewContainer) {
        this.resolver = resolver;
        this.viewContainer = viewContainer;
    }
    /**
     * @return {?}
     */
    DynamicFieldDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(controlMapper[this.field.type]);
        this.componentRef = this.viewContainer.createComponent(factory);
        this.componentRef.instance.field = this.field;
        this.componentRef.instance.group = this.group;
    };
    DynamicFieldDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[dynamic-field]'
                },] },
    ];
    /** @nocollapse */
    DynamicFieldDirective.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef }
    ]; };
    DynamicFieldDirective.propDecorators = {
        field: [{ type: Input }],
        group: [{ type: Input }]
    };
    return DynamicFieldDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicFormComponent = /** @class */ (function () {
    function DynamicFormComponent(fb) {
        this.fb = fb;
        this.fields = [];
        this.submit = new EventEmitter();
    }
    Object.defineProperty(DynamicFormComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.form.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DynamicFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    DynamicFormComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.form = this.createFormControls();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DynamicFormComponent.prototype.onSubmit = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.form.valid) {
            this.submit.emit(this.form.value);
        }
        else {
            this.validateAllFormFields(this.form);
        }
    };
    /**
     * @return {?}
     */
    DynamicFormComponent.prototype.createFormControls = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var group = this.fb.group({});
        this.fields.forEach(function (field) {
            if (field.type === "button")
                return;
            /** @type {?} */
            var control = _this.fb.control(field.value, _this.bindValidations(field.validations || []));
            group.addControl(field.name, control);
        });
        return group;
    };
    /**
     * @param {?} validations
     * @return {?}
     */
    DynamicFormComponent.prototype.bindValidations = /**
     * @param {?} validations
     * @return {?}
     */
    function (validations) {
        if (validations.length > 0) {
            /** @type {?} */
            var validList_1 = [];
            validations.forEach(function (valid) {
                validList_1.push(valid.validator);
            });
            return Validators.compose(validList_1);
        }
        return null;
    };
    /**
     * @param {?} formGroup
     * @return {?}
     */
    DynamicFormComponent.prototype.validateAllFormFields = /**
     * @param {?} formGroup
     * @return {?}
     */
    function (formGroup) {
        Object.keys(formGroup.controls).forEach(function (field) {
            /** @type {?} */
            var control = formGroup.get(field);
            control.markAsTouched({ onlySelf: true });
        });
    };
    DynamicFormComponent.decorators = [
        { type: Component, args: [{
                    exportAs: "dynamicForm",
                    selector: "dynamic-form",
                    template: "<form class=\"dynamic-form\" [formGroup]=\"form\" (submit)=\"onSubmit($event)\">\n    <ng-container *ngFor=\"let field of fields;\" dynamic-field [field]=\"field\" [group]=\"form\">\n    </ng-container>\n</form>",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    DynamicFormComponent.ctorParameters = function () { return [
        { type: FormBuilder }
    ]; };
    DynamicFormComponent.propDecorators = {
        fields: [{ type: Input }],
        submit: [{ type: Output }]
    };
    return DynamicFormComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynaformModule = /** @class */ (function () {
    function DynaformModule() {
    }
    DynaformModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        BrowserModule,
                        FormsModule,
                        ReactiveFormsModule,
                        ColorPickerModule
                    ],
                    declarations: [
                        DynamicFieldDirective,
                        CheckboxComponent,
                        InputComponent,
                        RadiobuttonComponent,
                        SelectComponent,
                        ButtonComponent,
                        ColorPickerComponent,
                        DynamicFormComponent
                    ],
                    entryComponents: [
                        InputComponent,
                        SelectComponent,
                        CheckboxComponent,
                        RadiobuttonComponent,
                        ColorPickerComponent,
                        ButtonComponent
                    ],
                    exports: [
                        DynamicFieldDirective,
                        DynamicFormComponent
                    ]
                },] },
    ];
    return DynaformModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DynaformModule, CheckboxComponent, InputComponent, RadiobuttonComponent, SelectComponent, ColorPickerComponent, DynamicFieldDirective, DynamicFormComponent, ButtonComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,