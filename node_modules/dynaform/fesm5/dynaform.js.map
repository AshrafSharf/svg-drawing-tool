{"version":3,"file":"dynaform.js.map","sources":["ng://dynaform/lib/controls/checkbox/checkbox.component.ts","ng://dynaform/lib/controls/input/input.component.ts","ng://dynaform/lib/controls/radiobutton/radiobutton.component.ts","ng://dynaform/lib/controls/select/select.component.ts","ng://dynaform/lib/controls/button/button.component.ts","ng://dynaform/lib/controls/color-picker/color-picker.component.ts","ng://dynaform/lib/directives/dynamic-field.directive.ts","ng://dynaform/lib/component/dynamic-form/dynamic-form.component.ts","ng://dynaform/lib/dynaform.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Field } from '../../model/field.interface';\n\n@Component({\n    selector: 'app-checkbox',\n    template: `<div class=\"form-check\" [formGroup]=\"group\">\n    <input [formControlName]=\"field.name\" type=\"checkbox\" class=\"form-check-input mr-2\" />\n    <label>{{field.label}}</label>\n</div>`,\n    styles: [``]\n})\nexport class CheckboxComponent implements OnInit {\n    field: Field;\n    group: FormGroup;\n\n    constructor() { }\n\n    ngOnInit() {\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Field } from '../../model/field.interface';\n\n@Component({\n    selector: 'app-input',\n    template: `<div class=\"form-group\" [formGroup]=\"group\">\n    <label>{{field.label}}</label>\n    <input formControlName=\"{{field.name}}\" [type]=\"field.inputType\" class=\"form-control\">\n    <ng-container *ngFor=\"let validation of field.validations;\">\n        <div class=\"text-danger mt-2\" *ngIf=\"group.get(field.name).invalid && (group.get(field.name).touched || group.get(field.name).dirty)\">{{validation.message}}</div>\n    </ng-container>\n</div>`,\n    styles: [``]\n})\nexport class InputComponent implements OnInit {\n    field: Field;\n    group: FormGroup;\n\n    constructor() { }\n\n    ngOnInit() {\n        console.log('inputcomponent : ngoninit');\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Field } from '../../model/field.interface';\n\n@Component({\n    selector: 'app-radiobutton',\n    template: `<div class=\"form-group\" [formGroup]=\"group\">\n    <ng-container *ngFor=\"let item of field.options\">\n        <label class=\"radio-inline mr-2\"><input type=\"radio\" [formControlName]=\"field.name\" [value]=\"item\"> {{item}}</label>\n    </ng-container>\n</div>`,\n    styles: [``]\n})\nexport class RadiobuttonComponent implements OnInit {\n    field: Field;\n    group: FormGroup;\n\n    constructor() { }\n\n    ngOnInit() {\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Field } from '../../model/field.interface';\n\n@Component({\n    selector: 'app-select',\n    template: `<div [formGroup]=\"group\">\n    <label>{{field.label}}</label>\n    <select class=\"form-control\" [formControlName]=\"field.name\">\n        <option [value]=\"item\" *ngFor=\"let item of field.options\"> {{item}}</option>\n    </select>\n</div>`,\n    styles: [``]\n})\nexport class SelectComponent implements OnInit {\n    field: Field;\n    group: FormGroup;\n\n    constructor() { }\n\n    ngOnInit() {\n    }\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\n\nimport { Field } from '../../model/field.interface';\n\n@Component({\n    selector: \"app-button\",\n    template: `<div>\r\n    <button class=\"btn btn-primary\" [formGroup]=\"group\" type=\"submit\">{{field.label}}</button>\r\n</div>`,\n    styles: [``]\n})\nexport class ButtonComponent implements OnInit {\n    field: Field;\n    group: FormGroup;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Field } from '../../model/field.interface';\n\n@Component({\n    selector: 'app-color-picker',\n    template: `<div class=\"form-group\" [formGroup]=\"group\">\n    <label>{{field.label}}</label>\n    <input class=\"form-control color-text\" [formControlName]=\"field.name\" [value]=\"field.value\" [(colorPicker)]=\"field.value\" [style.background]=\"field.value\" [cpOKButton]=\"true\" [cpCancelButton]=\"true\" [cpOutputFormat]=\"'hex'\" [cpSaveClickOutside]=\"true\"\n        (colorPickerChange)=\"onColorPickerChange($event)\">\n</div>`,\n    styles: [`.color-text{font-weight:bolder;color:#fff}`]\n})\nexport class ColorPickerComponent implements OnInit {\n    field: Field;\n    group: FormGroup;\n\n    constructor() { }\n\n    ngOnInit() {\n    }\n\n    onColorPickerChange(colorCode: string): void {\n        this.group.get(this.field.name).setValue(colorCode);\n    }\n}\n","import { Directive, Input, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { InputComponent } from '../controls/input/input.component';\nimport { SelectComponent } from '../controls/select/select.component';\nimport { RadiobuttonComponent } from '../controls/radiobutton/radiobutton.component';\nimport { CheckboxComponent } from '../controls/checkbox/checkbox.component';\nimport { ColorPickerComponent } from '../controls/color-picker/color-picker.component';\nimport { ButtonComponent } from '../controls/button/button.component';\n\nimport { Field } from '../model/field.interface';\n\nconst controlMapper = {\n    input: InputComponent,\n    select: SelectComponent,\n    radiobutton: RadiobuttonComponent,\n    checkbox: CheckboxComponent,\n    colorpicker: ColorPickerComponent,\n    button: ButtonComponent\n};\n\n@Directive({\n    selector: '[dynamic-field]'\n})\nexport class DynamicFieldDirective {\n    @Input() field: Field;\n    @Input() group: FormGroup;\n\n    componentRef: any;\n\n    constructor(private resolver: ComponentFactoryResolver, private viewContainer: ViewContainerRef) {\n    }\n\n    ngOnInit() {\n        const factory = this.resolver.resolveComponentFactory(controlMapper[this.field.type]);\n        this.componentRef = this.viewContainer.createComponent(factory);\n        this.componentRef.instance.field = this.field;\n        this.componentRef.instance.group = this.group;\n    }\n\n}\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\n\nimport { Field } from \"../../model/field.interface\";\n\n@Component({\n    exportAs: \"dynamicForm\",\n    selector: \"dynamic-form\",\n    template: `<form class=\"dynamic-form\" [formGroup]=\"form\" (submit)=\"onSubmit($event)\">\r\n    <ng-container *ngFor=\"let field of fields;\" dynamic-field [field]=\"field\" [group]=\"form\">\r\n    </ng-container>\r\n</form>`,\n    styles: [``]\n})\nexport class DynamicFormComponent implements OnInit, OnChanges {\n    @Input() fields: Field[] = [];\n\n    @Output() submit: EventEmitter<any> = new EventEmitter<any>();\n\n    form: FormGroup;\n\n    get value() {\n        return this.form.value;\n    }\n\n    constructor(private fb: FormBuilder) { }\n\n    ngOnInit() {\n    }\n\n    ngOnChanges() {\n        this.form = this.createFormControls();\n    }\n\n    onSubmit(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.form.valid) {\n            this.submit.emit(this.form.value);\n        } else {\n            this.validateAllFormFields(this.form);\n        }\n    }\n\n    createFormControls() {\n        const group = this.fb.group({});\n        this.fields.forEach(field => {\n            if (field.type === \"button\") return;\n            const control = this.fb.control(\n                field.value,\n                this.bindValidations(field.validations || [])\n            );\n            group.addControl(field.name, control);\n        });\n        return group;\n    }\n\n    bindValidations(validations: any) {\n        if (validations.length > 0) {\n            const validList = [];\n            validations.forEach(valid => {\n                validList.push(valid.validator);\n            });\n            return Validators.compose(validList);\n        }\n        return null;\n    }\n\n    validateAllFormFields(formGroup: FormGroup) {\n        Object.keys(formGroup.controls).forEach(field => {\n            const control = formGroup.get(field);\n            control.markAsTouched({ onlySelf: true });\n        });\n    }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { NgModule } from '@angular/core';\n\nimport { ColorPickerModule } from 'ngx-color-picker';\n\nimport { CheckboxComponent } from './controls/checkbox/checkbox.component';\nimport { InputComponent } from './controls/input/input.component';\nimport { RadiobuttonComponent } from './controls/radiobutton/radiobutton.component';\nimport { SelectComponent } from './controls/select/select.component';\nimport { ButtonComponent } from './controls/button/button.component';\nimport { ColorPickerComponent } from './controls/color-picker/color-picker.component';\n\nimport { DynamicFieldDirective } from './directives/dynamic-field.directive';\nimport { DynamicFormComponent } from './component/dynamic-form/dynamic-form.component';\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ColorPickerModule\n    ],\n    declarations: [\n        DynamicFieldDirective,\n        CheckboxComponent,\n        InputComponent,\n        RadiobuttonComponent,\n        SelectComponent,\n        ButtonComponent,\n        ColorPickerComponent,\n        DynamicFormComponent\n    ],\n    entryComponents: [\n        InputComponent,\n        SelectComponent,\n        CheckboxComponent,\n        RadiobuttonComponent,\n        ColorPickerComponent,\n        ButtonComponent\n    ],\n    exports: [\n        DynamicFieldDirective,\n        DynamicFormComponent\n    ]\n})\nexport class DynaformModule { }\n"],"names":[],"mappings":"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"}
